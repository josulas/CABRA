#include <Arduino.h>

// defines
#define SAMPLERATE 16000 // Hz
#define NSAMPLESPERBUFFER 128
#define MAXSAMPLES 2000
#define SERIALBAUD 960000
#define READPIN 13

// Task related variables
TaskHandle_t sendTask;
hw_timer_t *samplerTimer = NULL;
volatile bool sampling_done = true;

// ADC related variables
volatile uint16_t adcBuffer[MAXSAMPLES];
volatile uint adcRead = 0;
volatile uint16_t adcBufferIdx = 0;
volatile uint16_t sendBufferIdx = 0;
volatile uint16_t readVal = 0;
volatile long n_samples = 0;
char startSamplingFlag = 0;

void sendBuffer(){
  // Choose the right bufffer, which is not in use by the ADC
  Serial.write((uint8_t *) (adcBuffer + sendBufferIdx), NSAMPLESPERBUFFER * 2);
  sendBufferIdx = sendBufferIdx + NSAMPLESPERBUFFER;
}


void readADC(){
  adcBuffer[adcBufferIdx++] = analogRead(READPIN);
}


void IRAM_ATTR samplerTimerISER(){
  if (adcRead >= n_samples){
    timerAlarmDisable(samplerTimer);
    sampling_done = true;
  }
  else {
    adcRead++;
    readADC();
  }
}

void sendDataTask(void *pvParameters){
  for (;;){
    vTaskSuspend(NULL);
    sendBuffer();
  }
}


void setup(){
  // Pin configuration
  pinMode(READPIN, INPUT);               // ADC pin

  // Serial initialization
  Serial.setTxBufferSize(2 * NSAMPLESPERBUFFER);
  Serial.begin(SERIALBAUD);
  if (!Serial) {
    return;
  }
  
  // ADC configuration
  // analogSetAttenuation(ADC_0db);

  // Create a task that will send the data to the Raspberry Pi
  xTaskCreatePinnedToCore(
    sendDataTask,   /* Function to implement the task */
    "sendDataTask", /* Name of the task */
    1000,  /* Stack size in words */
    NULL,   /* Task input parameter */
    0,      /* Priority of the task */
    &sendTask,   /* Task handle. */
    0);     /* Core where the task should run */

  // Timer configuration
  samplerTimer = timerBegin(0, 80, true);    // 80 MHz / 800 = 1 MHz
  timerAttachInterrupt(samplerTimer, &samplerTimerISER, true);
  timerAlarmWrite(samplerTimer, (1000000 / SAMPLERATE), true); 
}


void loop(){
  while(!Serial.available()) {}
  n_samples = Serial.parseInt();
  while(!Serial.available()) {}
  Serial.readBytes(&startSamplingFlag, 1);
  Serial.flush(); // Wait for the Serial to stop reading data
  // Start sampling
  sampling_done = false;
  timerRestart(samplerTimer);
  timerAlarmEnable(samplerTimer);
  // Wait for the sampling and sending to finish
  while (!sampling_done) {
    if (adcBufferIdx >= sendBufferIdx + NSAMPLESPERBUFFER){
      vTaskResume(sendTask);
    }
  }
  // Send the remaining data
  while(adcBufferIdx >= sendBufferIdx + NSAMPLESPERBUFFER){
    sendBuffer();
  }
  if (adcBufferIdx > sendBufferIdx){
    Serial.write((uint8_t *) (adcBuffer + sendBufferIdx), (adcBufferIdx - sendBufferIdx) * 2);
  }
  // Reset the variables
  adcRead = 0;
  adcBufferIdx = 0;
  sendBufferIdx = 0;
  n_samples = 0;
}